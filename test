package com.example.app;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class UserClaimController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    private final ObjectMapper objectMapper;
    private final static String PROFILE_VIEW = "profile";

    @Autowired
    public UserClaimController(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    @GetMapping("/web/profile")
    public String userProfile(Model model, Authentication auth) {
        OidcUser user = (OidcUser) auth.getPrincipal();
        model.addAttribute(PROFILE_VIEW, user.getClaims());
        model.addAttribute("profileJson", getUserClaimsAndAuthoritiesJson(user.getClaims(), auth.getAuthorities()));
        return PROFILE_VIEW;
    }

    @GetMapping("/protected/profile")
    public String protectedUserProfile(Model model, Authentication auth) {
        OidcUser user = (OidcUser) auth.getPrincipal();
        model.addAttribute(PROFILE_VIEW, user.getClaims());
        model.addAttribute("profileJson", getUserClaimsAndAuthoritiesJson(user.getClaims(), auth.getAuthorities()));
        return PROFILE_VIEW;
    }

    private String getUserClaimsAndAuthoritiesJson(Map<String, Object> claims, Collection auth) {
        try {
            Map<String, Object> mergedClaims = new HashMap<>(claims);
            mergedClaims.put("roles", auth);
            return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(mergedClaims);
        } catch (JsonProcessingException jpe) {
            logger.error("Error parsing user claims and authorities to JSON", jpe);
        }
        return "Error parsing user claims and authorities to JSON.";
    }
}

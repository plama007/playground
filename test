import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.HealthComponent;
import org.springframework.boot.actuate.health.HealthEndpoint;
import org.springframework.boot.actuate.health.Status;

import static org.mockito.Mockito.*;

public class HealthCheckerTest {
    @Mock
    private HealthEndpoint healthEndpoint;

    @Mock
    private HealthComponent healthComponent;

    @Mock
    private Logger logger;

    @InjectMocks
    private HealthChecker healthChecker;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testLogHealth() {
        when(healthEndpoint.health()).thenReturn(healthComponent);
        when(healthComponent.getStatus()).thenReturn(Status.UP);

        healthChecker.logHealth();

        verify(logger, times(1)).info(eq("Application health: {}"), any(String.class));
    }

    @Test
    public void testLogHealthWithException() {
        when(healthEndpoint.health()).thenThrow(new RuntimeException("Error getting health"));

        healthChecker.logHealth();

        verify(logger, times(1)).error(eq("Error logging health"), any(RuntimeException.class));
    }
}

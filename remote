import { Injectable } from '@angular/core';
import { AuthConfig, OAuthService } from 'angular-oauth2-oidc';
import { BehaviorSubject, Observable, throwError } from 'rxjs';
import { catchError, filter, switchMap, tap } from 'rxjs/operators';

/**
 * Service for managing authentication with an OAuth2/OpenID Connect provider.
 */
@Injectable({
  providedIn: 'root'
})
export class AuthService {

  private loggedInSubject$: BehaviorSubject<boolean>;
  public loggedIn$: Observable<boolean>;

  /**
   * Creates an instance of AuthService.
   *
   * @param oauthService The OAuthService instance to use for authentication.
   */
  constructor(private oauthService: OAuthService) {
    this.loggedInSubject$ = new BehaviorSubject<boolean>(this.oauthService.hasValidAccessToken());
    this.loggedIn$ = this.loggedInSubject$.asObservable();
  }

  /**
   * Configures the OAuthService instance with the given AuthConfig and logs the user in.
   *
   * @param authConfig The AuthConfig object to use for configuration.
   */
  public configure(authConfig: AuthConfig) {
    this.oauthService.configure(authConfig);
    this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {
      if (this.oauthService.hasValidAccessToken()) {
        this.loggedInSubject$.next(true);
      }
      else {
        this.login();
      }
    });
  }

  /**
   * Initiates the login flow with the OAuth2/OpenID Connect provider.
   */
  public login() {
    this.oauthService.initLoginFlow();
  }

  /**
   * Logs the user out of the application and revokes their access token.
   */
  public logout() {
    this.oauthService.logOut();
    this.loggedInSubject$.next(false);
  }

  /**
   * Returns an Observable that emits the access token for the logged-in user.
   *
   * @returns An Observable that emits the access token for the logged-in user.
   */
  public getAccessToken(): Observable<string> {
    return this.loggedIn$.pipe(
      filter(loggedIn => loggedIn),
      switchMap(() => this.oauthService.getAccessToken()),
      catchError(error => throwError(error))
    );
  }

  /**
   * Returns an Observable that emits the ID token for the logged-in user.
   *
   * @returns An Observable that emits the ID token for the logged-in user.
   */
  public getIdToken(): Observable<string> {
    return this.loggedIn$.pipe(
      filter(loggedIn => loggedIn),
      switchMap(() => this.oauthService.getIdToken()),
      catchError(error => throwError(error))
    );
  }

  /**
   * Returns an Observable that emits the expiration time for the access token of the logged-in user.
   *
   * @returns An Observable that emits the expiration time for the access token of the logged-in user.
   */
  public getAccessTokenExpiration(): Observable<number> {
    return this.loggedIn$.pipe(
      filter(loggedIn => loggedIn),
      switchMap(() => this.oauthService.getAccessTokenExpiration()),
      catchError(error => throwError(error))
    );
  }

  /**
   * Returns an Observable that refreshes the access token for the logged-in user.
   *
   * @returns An Observable that refreshes the access token for the logged-in user.
   */
  public refreshToken(): Observable<void> {
    return this.loggedIn$.pipe(
      filter(loggedIn => loggedIn),
      switchMap(() => this.oauthService.refreshToken()),
      tap(() => this.loggedInSubject$.next(true)),
      catchError(error => {
        this.loggedInSubject$.next(false);
        return throwError(error);
      })
    );
  }

  /**
   * Returns a boolean indicating whether the logged-in user has a valid access token.
   *
   * @returns A boolean indicating whether
  /**
   * Returns a boolean indicating whether the logged-in user has a valid access token.
   *
   * @returns A boolean indicating whether the logged-in user has a valid access token.
   */
  public hasValidAccessToken(): boolean {
    return this.oauthService.hasValidAccessToken();
  }

  /**
   * Returns the identity claims for the logged-in user.
   *
   * @returns The identity claims for the logged-in user.
   */
  public getIdentityClaims(): any {
    return this.oauthService.getIdentityClaims();
  }

  /**
   * Returns the first name of the logged-in user.
   *
   * @returns The first name of the logged-in user.
   */
  public getFirstName(): string {
    const identityClaims = this.oauthService.getIdentityClaims();
    return identityClaims ? identityClaims['given_name'] : null;
  }

  /**
   * Returns the last name of the logged-in user.
   *
   * @returns The last name of the logged-in user.
   */
  public getLastName(): string {
    const identityClaims = this.oauthService.getIdentityClaims();
    return identityClaims ? identityClaims['family_name'] : null;
  }

  /**
   * Returns the user ID of the logged-in user.
   *
   * @returns The user ID of the logged-in user.
   */
  public getUserId(): string {
    const identityClaims = this.oauthService.getIdentityClaims();
    return identityClaims ? identityClaims['sub'] : null;
  }

  /**
   * Returns the full name of the logged-in user.
   *
   * @returns The full name of the logged-in user.
   */
  public getFullName(): string {
    const identityClaims = this.oauthService.getIdentityClaims();
    const givenName = identityClaims ? identityClaims['given_name'] : '';
    const familyName = identityClaims ? identityClaims['family_name'] : '';
    return givenName + ' ' + familyName;
  }

}

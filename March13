import { Injectable } from '@angular/core';
import { OAuthService, JwksValidationHandler, OAuthErrorEvent } from 'angular-oauth2-oidc';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  /**
   * Configuration for the OAuthService instance
   */
  private readonly authConfig = {
    issuer: 'https://pingfederate.example.com',
    redirectUri: window.location.origin,
    clientId: 'your-client-id',
    scope: 'openid profile email',
    responseType: 'code',
    showDebugInformation: true
  };

  /**
   * Constructor that initializes the OAuthService and configures it with the given authConfig
   */
  constructor(private oauthService: OAuthService) {
    this.oauthService.configure(this.authConfig);
    this.oauthService.tokenValidationHandler = new JwksValidationHandler();
    this.oauthService.loadDiscoveryDocumentAndTryLogin();
  }

  /**
   * Returns whether the user is currently authenticated or not
   * @returns {boolean} true if the user is authenticated, false otherwise
   */
  public isAuthenticated(): boolean {
    return this.oauthService.hasValidAccessToken();
  }

  /**
   * Returns the access token for the currently authenticated user
   * @returns {string} the access token
   */
  public getAccessToken(): string {
    return this.oauthService.getAccessToken();
  }

  /**
   * Returns the refresh token for the currently authenticated user
   * @returns {string} the refresh token
   */
  public getRefreshToken(): string {
    return this.oauthService.getRefreshToken();
  }

  /**
   * Returns the expiration date of the access token for the currently authenticated user
   * @returns {Date} the expiration date of the access token
   */
  public getAccessTokenExpiration(): Date {
    return this.oauthService.getAccessTokenExpiration();
  }

  /**
   * Returns the claims of the currently authenticated user
   * @returns {any} the claims of the user
   */
  public getUserClaims(): any {
    return this.oauthService.getIdentityClaims();
  }

  /**
   * Returns the name of the currently authenticated user
   * @returns {string} the name of the user
   */
  public getUserName(): string {
    const claims = this.oauthService.getIdentityClaims();
    if (!claims) return null;
    return claims['name'];
  }

  /**
   * Sets the access token for the currently authenticated user
   * @param {string} accessToken - the new access token
   */
  public setAccessToken(accessToken: string): void {
    this.oauthService.setAccessToken(accessToken);
  }

  /**
   * Sets the refresh token for the currently authenticated user
   * @param {string} refreshToken - the new refresh token
   */
  public setRefreshToken(refreshToken: string): void {
    this.oauthService.setRefreshToken(refreshToken);
  }

  /**
   * Sets the expiration date of the access token for the currently authenticated user
   * @param {Date} expirationDate - the new expiration date
   */
  public setAccessTokenExpiration(expirationDate: Date): void {
    this.oauthService.setAccessTokenExpiration(expirationDate);
  }

  /**
   * Sets the claims of the currently authenticated user
   * @param {any} claims - the new claims
   */
  public setUserClaims(claims: any): void {
    this.oauthService.setIdentityClaims(claims);
  }

  /**
   * Returns the current OAuthService instance
   * @returns {OAuthService} the OAuthService instance
   */
  public getOAuthService(): OAuthService {
    return this.oauthService;
  }

  /**
   * Adds a listener for OAuthErrorEvent
   * @param {(error: OAuthErrorEvent) => void} listener - the listener function to add
   */
  public addOAuthErrorEventListener(listener: (error: OAuthErrorEvent) => void): void {
    this.oauthService.events.subscribe((event) => {
      if (event instanceof OAuthErrorEvent) {
        listener(event);
      }
    });
  }

  /**
   * Removes a listener for OAuthErrorEvent
   * @param {(error: OAuthErrorEvent) => void} listener - the listener function to remove
   */
  public removeOAuthErrorEventListener(listener: (error: OAuthErrorEvent) => void): void {
    this.oauthService.events.unsubscribe(listener);
  }
}

import { Component } from '@angular/core';
import { AuthService } from './auth.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  providers: [AuthService]
})
export class AppComponent {
  constructor(private authService: AuthService) {}

  login(): void {
    this.authService.getOAuthService().initImplicitFlow();
  }
}

<button (click)="login()">Login</button>

import { Component, OnInit } from '@angular/core';
import { AuthService } from './auth.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  providers: [AuthService]
})
export class AppComponent implements OnInit {
  userClaims: any;
  userName: string;

  constructor(private authService: AuthService) {}

  ngOnInit(): void {
    this.userClaims = this.authService.getUserClaims();
    this.userName = this.authService.getUserName();
  }

  // ...
}

<div *ngIf="authService.isAuthenticated()">
  <p>Welcome, {{ userName }}!</p>
  <p>Your claims:</p>
  <ul>
    <li *ngFor="let claim of userClaims | keyvalue">{{ claim.key }}: {{ claim.value }}</li>
  </ul>
</div>


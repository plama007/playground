import { Injectable, OnDestroy } from '@angular/core';
import { AuthConfig, OAuthService } from 'angular-oauth2-oidc';
import { BehaviorSubject, Observable, throwError, Subject } from 'rxjs';
import { catchError, filter, switchMap, takeUntil, tap } from 'rxjs/operators';

interface IdentityClaims {
  sub: string;
  given_name: string;
  family_name: string;
  // Add more claims as needed
}

/**
 * AuthService handles authentication using OAuth2.
 */
@Injectable({
  providedIn: 'root'
})
export class AuthService implements OnDestroy {
  private loggedInSubject$: BehaviorSubject<boolean>;
  private loggedIn$: Observable<boolean>;
  private destroy$: Subject<void> = new Subject<void>();

  constructor(private oauthService: OAuthService) {
    this.loggedInSubject$ = new BehaviorSubject<boolean>(this.oauthService.hasValidAccessToken());
    this.loggedIn$ = this.loggedInSubject$.asObservable().pipe(takeUntil(this.destroy$));
  }

  /**
   * Clean up when the service is destroyed.
   */
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  /**
   * Configures OAuthService with the given authConfig and tries to log in.
   * @param {AuthConfig} authConfig - The authentication configuration.
   */
  public configure(authConfig: AuthConfig) {
    this.oauthService.configure(authConfig);
    this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {
      if (this.oauthService.hasValidAccessToken()) {
        this.setLoggedIn(true);
      }
    });
  }

  /**
   * Initiates the login process.
   */
  public login() {
    this.oauthService.initLoginFlow();
  }

  /**
   * Logs out the user.
   */
  public logout() {
    this.oauthService.logOut();
    this.setLoggedIn(false);
  }

  /**
   * Returns an Observable of the access token.
   * @returns {Observable<string>} An Observable of the access token.
   */
  public getAccessToken(): Observable<string> {
    return this.loggedIn$.pipe(
      filter(loggedIn => loggedIn),
      switchMap(() => this.oauthService.getAccessToken()),
      catchError(error => this.handleError(error))
    );
  }

  /**
   * Returns an Observable of the ID token.
   * @returns {Observable<string>} An Observable of the ID token.
   */
  public getIdToken(): Observable<string> {
    return this.loggedIn$.pipe(
      filter(loggedIn => loggedIn),
      switchMap(() => this.oauthService.getIdToken()),
      catchError(error => this.handleError(error))
    );
  }

  /**
   * Returns an Observable of the access token expiration time.
   * @returns {Observable<number>} An Observable of the access token expiration time.
   */
  public getAccessTokenExpiration(): Observable<number> {
    return this.loggedIn$.pipe(
      filter(loggedIn => loggedIn),
      switchMap(() => this.oauthService.getAccessTokenExpiration()),
      catchError(error => this.handleError(error))
    );
  }

  /**
   * Refreshes the access token.
   * @returns {Observable<void>} An Observable that completes when the token has been refreshed.
   */
  public refreshToken(): Observable<void> {
    return this.loggedIn$.pipe(
      filter(loggedIn => loggedIn),
      switchMap(() => this.oauthService.refreshToken()),
      tap(() => this.setLoggedIn(true)),
      catchError(error => {
        this.setLoggedIn(false);
        return this.handleError(error);
      })
    );
  }

  /**
   * Checks if the user has a valid access token.
   * @returns {boolean} True if the user has a valid access token.
   */
  public hasValidAccessToken(): boolean {
    return this.oauthService.hasValidAccessToken();
  }

  /**
   * Returns the user's first name.
   * @returns {string} The user's first name.
   */
  public getFirstName(): string {
    return this.getClaimValue('given_name');
  }
  
  /**
   * Returns the user's last name.
   * @returns {string} The user's last name.
   */
  public getLastName(): string {
    return this.getClaimValue('family_name');
  }

  /**
   * Returns the user's ID.
   * @returns {string} The user's ID.
   */
  public getUserId(): string {
    return this.getClaimValue('sub');
  }

  /**
   * Returns the user's full name.
   * @returns {string} The user's full name.
   */
  public getFullName(): string {
    return `${this.getFirstName()} ${this.getLastName()}`;
  }

  private setLoggedIn(loggedIn: boolean) {
    this.loggedInSubject$.next(loggedIn);
  }

  /**
   * Handles errors by logging them and returning a new error Observable.
   * @param {any} error - The error to handle.
   * @returns {Observable<never>} An Observable that raises an error.
   */
  private handleError(error: any) {
    console.error('Error in AuthService:', error);
    // TODO: Add remote logging and more specific error handling if necessary.
    return throwError(error);
  }

  /**
   * Returns the identity claims for the user.
   * @returns {IdentityClaims} The identity claims for the user.
   */
  private getIdentityClaims(): IdentityClaims {
    return this.oauthService.getIdentityClaims() as IdentityClaims;
  }

  /**
   * Returns the value of a specific claim.
   * @param {string} claimKey - The key of the claim to retrieve.
   * @returns {string} The value of the specified claim.
   */
  private getClaimValue(claimKey: string): string {
    const identityClaims = this.getIdentityClaims();
    return identityClaims ? identityClaims[claimKey] : null;
  }
}


import { AuthConfig } from 'angular-oauth2-oidc';

// Configure the AuthConfig object with your OAuth2/OpenID Connect provider's details
const authConfig: AuthConfig = {
  issuer: 'https://your-auth-server.com',
  clientId: 'your-client-id',
  redirectUri: window.location.origin + '/callback',
  responseType: 'code',
  scope: 'openid profile email',
};

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule, OAuthModule.forRoot()],
  providers: [AuthService],
  bootstrap: [AppComponent]
})
export class AppModule {
  constructor(private authService: AuthService) {
    this.authService.configure(authConfig);
  }
}

import { Component } from '@angular/core';
import { AuthService } from './auth.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  constructor(private authService: AuthService) {
    this.authService.login();
  }
}

